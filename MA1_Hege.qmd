---
title: "Mandatory Assignments in Econometrics"
author: "Hege Johansen"
format: html
editor: visual
bibliography: [Econometrics-Hege.bib]
---

# Mandatory Assignment 1

## Introduction

In this assignment I am going to look at two measures, GDP per Capita and the watertight GDP Gini-coefficient for a group of countries.

For GDP per capita I will look at the countries of Finland and Turkey, both combined and separate.
For the watertight GDP Gini-coefficient I will take a look at Finland, Turkey, United Kingdom and Czech Republic, both combined and separate.

## Data

```{r setup}
#| echo: false
#| output: false

library(tidyverse)
library(tinytex)
library(dplyr)
library(ggplot2)
library(dineq)
library(readxl)
library(magrittr)
library(vtable)
library(gridExtra)
library(huxtable)
```

```{r EU-data}
#| echo: false
#| output: false

# EU data taken from: 
  # https://ec.europa.eu/eurostat/databrowser/view/demo_r_pjanaggr3/default/table?lang=en
  # https://ec.europa.eu/eurostat/databrowser/view/nama_10r_3gdp/default/table?lang=en
 

eu_pop_nuts3 <- read_excel("demo_r_pjanaggr3__custom_3572346_spreadsheet.xlsx", 
    sheet = "cleaned_pop")
eu_gdp_nuts3 <- read_excel("nama_10r_3gdp__custom_3572365_spreadsheet.xlsx", 
    sheet = "cleaned_gdp")
```

```{r UK-data}
#| echo: false
#| output: false

# Uk data taken from:
  # https://www.ons.gov.uk/economy/grossdomesticproductgdp/datasets/regionalgrossdomesticproductallnutslevelregions

  uk_pop <- read_excel("regionalgrossdomesticproductgdpallitlregions.xlsx", 
      sheet = "Table 6", skip = 1)
  
  uk_gdp <- read_excel("regionalgrossdomesticproductgdpallitlregions.xlsx", 
      sheet = "Table 5", skip = 1)
   
  # Drop non nuts 3 regions
   uk_gdp_nuts3 <- uk_gdp %>%
    # Count the numbers of id characters 
    mutate("N_car_id" = nchar(uk_gdp$`ITL code`)) %>%
    # Keep thoes that have 5 e.g. NUTS3 Regions
   filter(N_car_id == 5)
   
   uk_pop_nuts3 <- uk_pop %>%
    # Count the numbers of id characters 
    mutate("N_car_id" = nchar(uk_pop$`ITL code`)) %>%
    # Keep thoes that have 5 e.g. NUTS3 Regions
    filter(N_car_id == 5) 

```

```{r EU-popdata}
#| echo: false
#| output: false

# Transformation from wide to long
 eu_pop_nuts3 <- eu_pop_nuts3 %>% 
   mutate_if(is.numeric,as.character, is.factor, as.character) %>% 
   pivot_longer(
    cols = c('2000':'2020'),
    names_to = "Year",
    values_to = "Population"
  )
 
  # Renaming geo column
      eu_pop_nuts3 <- rename(eu_pop_nuts3, "Region_code" = "GEO (Codes)")
```

```{r UK-pop-data}
#| echo: false
#| output: false

# Transformation from wide to long
  uk_pop_nuts3 <- uk_pop_nuts3 %>% 
   mutate_if(is.numeric,as.character, is.factor, as.character) %>% 
   pivot_longer(
    cols = c('2000':'2020'),
    names_to = "Year",
    values_to = "Population"
    )
  
# Renaming a column
   uk_pop_nuts3 <- rename(uk_pop_nuts3, "Region_code" = "ITL code")
# Keep relevant vars
   uk_pop_nuts3 <- uk_pop_nuts3 %>% select("Region_code", "Year","Population")    

```

```{r Merge of UK and EU data}
#| echo: false
#| output: false

pop_all_nuts3 <- rbind(uk_pop_nuts3, eu_pop_nuts3)

```

```{r EU-gdp-data}
#| echo: false
#| output: false

# Transforming from wide to short
  eu_gdp_nuts3 <- eu_gdp_nuts3 %>%  
  mutate_if(is.numeric,as.character, is.factor, as.character) %>%  
  pivot_longer(
    cols = c('2000':'2020'),
    names_to = "Year",
    values_to = "GDP")
  
# Renaming geo column
      eu_gdp_nuts3 <- rename(eu_gdp_nuts3, "Region_code" = "GEO (Codes)")

```

```{r UK-gdp-data}
#| echo: false
#| output: false

# Transforming from wide to short
  uk_gdp_nuts3 <- uk_gdp_nuts3 %>% 
  mutate_if(is.numeric,as.character, is.factor, as.character) %>%  
  pivot_longer(
    cols = c('2000':'2020'),
    names_to = "Year",
    values_to = "GDP")
  
# Transforming from GDP in pounds to GDP in Euro
uk_gdp_nuts3 <- uk_gdp_nuts3 %>% 
  mutate("GDP" = c(as.numeric(GDP) * 1.14))

# Renaming geo column
    uk_gdp_nuts3 <- rename(uk_gdp_nuts3, "Region_code" = "ITL code")
      
# Keep relevant vars
    uk_gdp_nuts3 <- uk_gdp_nuts3 %>% select("Region_code", "Year", "GDP")

```

```{r Merge of UK- and EU-gdp-data}
#| echo: false
#| output: false   

gdp_all_nuts3 <- rbind(uk_gdp_nuts3, eu_gdp_nuts3 )

```

```{r Conversion from GDP in millions to GDP in ones}
#| echo: false
#| output: false

gdp_all_nuts3 <- gdp_all_nuts3 %>% 
  mutate("GDP" = as.numeric(GDP) * 1000000) 

```

```{r Merging of gdp- and pop-tables}
#| echo: false
#| output: false

GDPandPOP_all_nuts3 <- merge(gdp_all_nuts3, pop_all_nuts3)

```

```{r Removal of rows with missing values}
#| echo: false
#| output: false

GDPandPOP_all_nuts3 <- na_if(GDPandPOP_all_nuts3, ":") %>% 
   na.omit(GDPandPOP_all)

```

## Calculation of GDP per Capita

The formula for calculating GDP per Capita is as follows:

$y_i=GDP_i/population_i$

```{r Calculation GDP per Capita-column}

# Calculation of GDP per Capita for all regions
GDPperCap_all_nuts3 <- mutate(GDPandPOP_all_nuts3, "GDP_per_capita" = as.numeric(GDPandPOP_all_nuts3$GDP) / as.numeric(GDPandPOP_all_nuts3$Population))
```

```{r column for Nuts 1 id}
#Gen Nuts 1 id
GDPperCap_all_nuts3 %<>%  
  mutate(id_nuts0 = substr(GDPperCap_all_nuts3$"Region_code", 1,2))

#Gen Nuts 3 id
GDPperCap_all_nuts3 %<>%  
  mutate(id_nuts3 = substr(GDPperCap_all_nuts3$"Region_code", 1, 5))
  
```

### GDP per Capita by country

```{r dataframe for Finland and Turkey}
#| echo: false
#| output: false

Finland_nuts3 <- GDPperCap_all_nuts3 %>%  
  filter(grepl("FI", id_nuts0)) 
  
Turkey_nuts3 <- GDPperCap_all_nuts3 %>% 
  filter(grepl("TR", id_nuts0)) 
 


FI_TR_nuts3 <- rbind(Finland_nuts3, Turkey_nuts3)
```

Why

```{r}
#| echo: false

GDPperCap_all_nuts3 %>% 
  filter(Year == 2019) %>% 
  select(., 'GDP', 'Population', 'GDP_per_capita') %>% 
  st()

```

```{r}
#| echo: false

FI_TR_nuts3 %>%  
  distinct(id_nuts0, Year, .keep_all = TRUE) %>%  

  ggplot(aes(x = Year,
        y = GDP_per_capita, 
        fill = id_nuts0, 
        color = id_nuts0,
        group = id_nuts0)) +
  geom_line(lwd = 0.8) +
  labs(x = "Year", y = "GDP per capita") +
  ggtitle("Changes in GDP per Capita by country") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

### GDP per Capita - Finland

```{r GDP per capita for Finland regions}
#| echo: false

Finland_nuts3 %>%  
  distinct(Region_code, Year, .keep_all = TRUE) %>% 
  ggplot(aes(x = Year, 
        y = GDP_per_capita, 
        fill = Region_code, 
        color = Region_code,
        group = Region_code)) +
  geom_line(lwd = 0.8) +
   labs(x = "Year", y = "GDP per capita") +
  ggtitle("Finland: GDP per capita - NUTS3") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

#### The 3 wealthiest regions 2019

```{r wealthiest regions in finland 2019}
#| echo: false

FI_TR_nuts3 %>%
  filter(grepl("FI...", id_nuts3), Year == 2019) %>%
  select(id_nuts3, GDP_per_capita) %>%
  slice_max(GDP_per_capita, n = 3)
```

FI1B1 = Helsinki, FI200 = Åland, FI 195 = Pohjanmaa

#### The 3 least wealthiest regions in 2019

```{r least wealthiest regions in finland 2019}
#| echo: false

FI_TR_nuts3 %>%
  filter(grepl("FI...", id_nuts3), Year == 2019) %>%
  select(id_nuts3, GDP_per_capita) %>%
  slice_min(GDP_per_capita, n = 3)

```

FI1D1 = Etelä-Savo, FI1C3 = Päijät-Häme, FI1D8 = Kainuu

### GDP per Capita - Turkey

**Hege: How can i fix the layout for the plot? it does not look very good:**

***André: I think hear you might need to look at some selected regions min max group for example***

```{r GDP per capita for Turkey regions}
#| echo: false

Turkey_nuts3 %>%  
  distinct(Region_code, Year, .keep_all = TRUE) %>% 
  ggplot(aes(x = Year, 
        y = GDP_per_capita, 
        fill = Region_code, 
        color = Region_code,
        group = Region_code)) +
  geom_line(lwd = 0.8) +
   labs(x = "Year", y = "GDP per capita") +
  ggtitle("Turkey: GDP per capita - NUTS3") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

```{r GDP per capita for Turkey regions max}
#| echo: false

Turkey_nuts3 %>%  
  distinct(Region_code, Year, .keep_all = TRUE) %>%
  filter(id_nuts3=="TR100" | id_nuts3=="TR421" ) %>% 
  ggplot(aes(x = Year, 
        y = GDP_per_capita, 
        fill = Region_code, 
        color = Region_code,
        group = Region_code)) +
  geom_line(lwd = 0.8) +
   labs(x = "Year", y = "GDP per capita") +
  ggtitle("Turkey: GDP per capita - NUTS3") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

#### The 3 wealthiest regions 2019

```{r wealthiest regions in Turkey 2019}
#| echo: false

FI_TR_nuts3 %>%
  filter(grepl("TR...", id_nuts3), Year == 2019) %>%
  select(id_nuts3, GDP_per_capita) %>%
  slice_max(GDP_per_capita, n = 3)
```

TR100 = Instanbul, TR421 = Kocaeli, TR510 = Ankara

#### The 3 least wealthiest regions in 2019

```{r Turkeys least wealthiest regions 2019}
#| echo: false

FI_TR_nuts3 %>%
  filter(grepl("TR...", id_nuts3), Year == 2019) %>%
  select(id_nuts3, GDP_per_capita) %>%
  slice_min(GDP_per_capita, n = 3)
```

TRA21 = Agri, TRC21 = Sanliurfa, TRB21 = Van

## Regional inequity

### Calculation of the population watertight GDP Ginie coefficients for the European NUTS2 () level.

The calculation of the Gini-coeffisient is as follows:

$$GINW_j=\frac{1}{2 \bar{y_j}} \sum_{i}^{n_j}\sum_{l}^{n_j}\frac{p_i}{P_j} \frac{p_l}{P_j} |y_i-y_l|$$

```{r calculation of gini}
GDPperCap_all_nuts3$GDP_per_capita <- as.numeric(GDPperCap_all_nuts3$GDP_per_capita)
GDPperCap_all_nuts3$Population <- as.numeric(GDPperCap_all_nuts3$Population)

gini.wtd(GDPperCap_all_nuts3$GDP_per_capita, weights = GDPperCap_all_nuts3$Population)
```

```{r mutate ids}
#Nuts 2 id
GDPperCap_all_nuts3 <- GDPperCap_all_nuts3 %>%  
  mutate(id_nuts2 = substr(GDPperCap_all_nuts3$`Region_code`,1,4))
#Nuts 2 id
GDPperCap_all_nuts3 <- GDPperCap_all_nuts3 %>%  
  mutate(id_nuts0 = substr(GDPperCap_all_nuts3$`Region_code`,1,2))
```

```{r calculation  of gini 2}
GDPperCap_all_nuts3  %<>% 
  group_by(id_nuts2, Year) %>% 
  mutate(gini_n2 = gini.wtd(GDP_per_capita, w = Population)) %>%
  ungroup() # to remove grouping
```

#### Gini-cofficients by country:

**Hege: Does this seem right?**

***André: What does group_by() do it tells R to do all operations that follow for a seated group if you aim is to calculate for all nuts2 regions within on year the gine you need to define the group accordingly so group_by(id_nuts2, Year)***

```{r Gini per country}
GDPperCap_all_nuts3 %>%  
  distinct(id_nuts0, Year, .keep_all = TRUE) %>%  

  ggplot(aes(x = Year,
        y = gini_n2, 
        fill = id_nuts0, 
        color = id_nuts0,
        group = id_nuts0)) +
  geom_line(lwd = 0.8) +
  labs(x = "Year", y = "Gini") +
  ggtitle("Gini-coefficient by country - NUTS0") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

#### Gini-coefficients for NUTS2 regions - Czech Republic

**Andre: Are the gini-coefficients supposed to be the same for each region all years? Or am I missing something?**

```{r Gini for Czech Republic, NUTS2}
#| echo: false

  GDPperCap_all_nuts3 %>%
    filter(grepl("CZ..", id_nuts2)) %>% 
     ggplot(aes(x = Year, 
        y = gini_n2, 
        fill = id_nuts2, 
        color = id_nuts2,
        group = id_nuts2)) +
  geom_line(lwd = 0.8) +
  labs(x = "Year", y = "Gini") +
  ggtitle("Czech Republic: GINI - NUTS2") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

```{r Gini 2019 for Czech Republic - NUTS2}
#| echo: false

hist_czechgini_nuts2 <- GDPperCap_all_nuts3 %>%
 filter(grepl("CZ..", id_nuts2), Year == 2019) %>% 
  distinct(id_nuts2, Year, gini_n2) %>% 
  ggplot(aes(x = gini_n2)) +
   geom_histogram(
    colour = "white", 
    fill = "green", 
    bins = 20, 
    alpha = 0.5) +
    labs(x = "Gini-coefficient") +
  ggtitle("Czech Republic: Gini 2019 - NUTS2")

 
dens_czechgini_nuts2 <- GDPperCap_all_nuts3 %>%
  filter(grepl("CZ..", id_nuts2)) %>%  
  distinct(id_nuts2, Year, gini_n2) %>% 
  ggplot(
    mapping = aes(x = gini_n2)) +
  geom_density(
    alpha = 0.2, 
    fill = "green") +
  labs(x = "Gini-coefficient") +
  ggtitle("Czech Republic: Gini 2019 - NUTS2")

# This is a misliding title as its gini over all years

grid.arrange(hist_czechgini_nuts2,
             dens_czechgini_nuts2)
```

```{r ranking gini Czech}
GDPperCap_all_nuts3 %>%
  filter(grepl("CZ..", id_nuts2), Year == 2019) %>% distinct(id_nuts2, gini_n2) %>% 
  select(id_nuts2, gini_n2) %>%
  slice_min(gini_n2, n = 8)
```

#### Gini-coefficients for NUTS2 regions - Finland

```{r Gini for Finland, NUTS2}
#| echo: false

  GDPperCap_all_nuts3 %>%
    filter(grepl("FI..", id_nuts2)) %>% 
    distinct(id_nuts2, Year, gini_n2) %>% 
     ggplot(aes(x = Year, 
        y = gini_n2, 
        fill = id_nuts2, 
        color = id_nuts2,
        group = id_nuts2)) +
  geom_line(lwd = 0.8) +
  labs(x = "Year", y = "Gini") +
  ggtitle("Finland: GINI - NUTS2") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))

```

```{r Gini 2019 for Finland - NUTS2}
#| echo: false

hist_finlandgini_nuts2 <- GDPperCap_all_nuts3 %>%
filter(grepl("FI..", id_nuts2), Year == 2019) %>% 
distinct(id_nuts2, Year, gini_n2) %>% 
ggplot(aes(x = gini_n2)) +
  geom_histogram(
    colour = "white", 
    fill = "green", 
    bins = 20, 
    alpha = 0.5) +
  labs(x = "Gini-coefficient") +
  ggtitle("Finland: Gini 2019 - NUTS2")

 
dens_finlandgini_nuts2 <- GDPperCap_all_nuts3 %>%
filter(grepl("FI..", id_nuts2)) %>% 
distinct(id_nuts2, Year, gini_n2) %>% 
ggplot(
    mapping = aes(x = gini_n2, )) +
  geom_density(
    alpha = 0.2, 
    fill = "green") +
  labs(x = "Gini-coefficient") +
  ggtitle("Finland: Gini 2019 - NUTS2")

grid.arrange(hist_finlandgini_nuts2,
             dens_finlandgini_nuts2,
             nrow = 1)
```

```{r ranking gini Finland}
GDPperCap_all_nuts3 %>%
  filter(grepl("FI..", id_nuts2), Year == 2019) %>% distinct(id_nuts2, gini_n2) %>% 
  select(id_nuts2, gini_n2) %>%
  slice_min(gini_n2, n = 5)
```

#### Gini-coefficients for NUTS2 regions - United Kingdom

```{r Gini for United Kingdom, NUTS2}
#| echo: false

  GDPperCap_all_nuts3 %>%
    filter(grepl("TL..", id_nuts2)) %>% 
     ggplot(aes(x = Year, 
        y = gini_n2, 
        fill = id_nuts2, 
        color = id_nuts2,
        group = id_nuts2)) +
  geom_line(lwd = 0.8) +
   labs(x = "Year", y = "Gini") +
  ggtitle("United Kindom: GINI - NUTS2") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

```{r Gini 2019 for United Kingdom - NUTS2}
#| echo: false

hist_ukgini_nuts2 <- GDPperCap_all_nuts3 %>%
filter(grepl("TL..", id_nuts2), Year == 2019) %>%  
distinct(id_nuts2, Year, gini_n2) %>% 
ggplot(aes(x = gini_n2)) +
  geom_histogram(
    colour = "white", 
    fill = "green", 
    bins = 20, 
    alpha = 0.5) +
  labs(x = "Gini-coefficient") +
  ggtitle("United Kingdom: Gini 2019 - NUTS2")

dens_ukgini_nuts2 <- GDPperCap_all_nuts3 %>%
  filter(grepl("TR..", id_nuts2)) %>%  
  distinct(id_nuts2, Year, gini_n2) %>% 
  ggplot(
    mapping = aes(x = gini_n2)) +
  geom_density(
    alpha = 0.2, 
    fill = "green") +
  xlim(0, 0.5) +
  labs(x = "Gini-coefficient") +
  ggtitle("United Kingdom: Gini 2019 - NUTS2")

grid.arrange(hist_ukgini_nuts2,
             dens_ukgini_nuts2,
             nrow = 1)
```

```{r Top 5 gini UK}
GDPperCap_all_nuts3 %>%
  filter(grepl("TL..", id_nuts2), Year == 2019) %>% distinct(id_nuts2, gini_n2) %>% 
  select(id_nuts2, gini_n2) %>%
  slice_min(gini_n2, n = 5 )
```

**Hege: How can I get the numbers in opposite order?**

***André: I do not understand that question do you mean from min to max?***

```{r Bottom 5 gini UK}
GDPperCap_all_nuts3 %>%
  filter(grepl("TL..", id_nuts2), Year == 2019) %>% distinct(id_nuts2, gini_n2) %>% 
  select(id_nuts2, gini_n2) %>%
  slice_max(gini_n2, n = 5) 

```

#### Gini-coefficients for NUTS2 regions - Turkey

```{r Gini for Turkey NUTS2}
#| echo: false

  GDPperCap_all_nuts3 %>%
    filter(grepl("TR..", id_nuts2)) %>% 
     ggplot(aes(x = Year, 
        y = gini_n2, 
        fill = id_nuts2, 
        color = id_nuts2,
        group = id_nuts2)) +
  geom_line(lwd = 0.8) +
   labs(x = "Year", y = "Gini") +
  ggtitle("Turkey: GINI - NUTS2") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
```

```{r Gini 2019 for Turkey - NUTS2}
#| echo: false

hist_turkeygin_nuts2 <- GDPperCap_all_nuts3 %>%
filter(grepl("TR..", id_nuts2), Year == 2019) %>%  
distinct(id_nuts2, Year, gini_n2) %>%   
ggplot(aes(x = gini_n2)) +
  geom_histogram(
    colour = "white", 
    fill = "green", 
    bins = 20, 
    alpha = 0.5) +
    labs(x = "Gini-coefficient") +
  ggtitle("Turkey: Gini 2019 - NUTS2")

 
dens_turkeygini_nuts2 <- GDPperCap_all_nuts3 %>%
  filter(grepl("TR..", id_nuts2), Year == 2019) %>%  
  distinct(id_nuts2, Year, gini_n2) %>% 
  ggplot(
    mapping = aes(x = gini_n2)) +
  geom_density(
    alpha = 0.2, 
    fill = "green") +
  labs(x = "Gini-coefficient") +
  ggtitle("Turkey: Gini 2019 - NUTS2")

  grid.arrange(hist_turkeygin_nuts2,
             dens_turkeygini_nuts2)

```

```{r Top 5 gini Turkey}
GDPperCap_all_nuts3 %>%
  filter(grepl("TR..", id_nuts2), Year == 2019) %>% distinct(id_nuts2, gini_n2) %>% 
  select(id_nuts2, gini_n2) %>%
  slice_min(gini_n2, n = 5)
```

**Andre: How can I get the numbers in opposite order?**

```{r Bottom 5 gini Turkey}
GDPperCap_all_nuts3 %>%
  filter(grepl("TR..", id_nuts2), Year == 2019) %>% distinct(id_nuts2, gini_n2) %>% 
  select(id_nuts2, gini_n2) %>%
  slice_max(gini_n2, n = 5)
```

## Assignment 2 (Crossectional Estimates) (S.d.W. 43)

Growth and inequity

**Estimate the effete of regional development** $y_j$ **on regional inequality** $GINIW_j$ **for the year 2010**

Economical development is the logarithm of GDP per capita, according to [@lessmann2017].
In this case that is regional development.

```{r}

# creating new dataframe for 2010 - nuts 2
data2010_nuts2 <- GDPperCap_all_nuts3 %>% 
  filter(Year == 2010) %>% 
  select(GDP_per_capita, id_nuts2, gini_n2) %>% 
  mutate(log_gdp_pc = log(GDP_per_capita))
```

```{r}
#| output: true
lm_allcountries <- lm(gini_n2~log_gdp_pc, data2010_nuts2)
```

**Discuss the goodness of fit of your estimated model.**

**Plot the relationship between regional development** $y_j$ **and regional inequality** $GINIW_j$ **and the fitted line corresponding to your estimate.**

```{r}
#Save coefficients
b1_allcountries <- lm_allcountries$coefficients[1]
b2_allcountries <- lm_allcountries$coefficients[2]

data2010_nuts2 %>% 
  ggplot() +
  xlim(0, 15) +
  ylim(-0.3, 0.5) +
  geom_point(aes(x = log_gdp_pc, y = gini_n2)) +
  geom_abline(intercept = b1_allcountries, slope = b2_allcountries)
```

**Plot the residuals against the predicted values of your model.**

**Discuss the classical assumptions OLS in light of your data and plots**

Other determinants of inequity

-   Download from [Eurostat](https://ec.europa.eu/eurostat/web/regions/data/database) for you subset of countries regional (NUTS2, j ) data related to transport infrastructure, education and demographics.
    Select on variable per category that you would like to explore further in there relationship to regional inequality $GINIW_j$ .

-   Estimate a multiple linear regression model with you new variables for 2010 and give a small interpretation of your findings.

-   Discuss the overall fit of your model

-   Discuss the inference related to your findings
